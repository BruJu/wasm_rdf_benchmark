#!/usr/bin/env python3

import datetime
import os
import random
import subprocess
import sys

os.chdir(os.path.dirname(sys.argv[0]))

KINDS = {
    "tree"      : { 'few' : 1, 'all': 6 },
    "wasm_tree" : { 'few' : 1, 'all': 6 },
    "graphy"    : { 'few' : 1 },
    "n3"        : { 'few' : 3 }
}

COMMAND = "./b_nodejs/benchLoad.js {task} '{filename}' {kind}"

def main():
    # -- ArgParse
    if len(sys.argv) < 2:
        print("usage: {} <file> <number_of_runs = 1>".format(sys.argv[0]), file=sys.stderr)
        exit(0)
    
    filename = sys.argv[1]
    
    if len(sys.argv) >= 3:
        iterations = int(sys.argv[2])
    else:
        iterations = 1

    if len(sys.argv) >= 4:
        datasets = [kind for kind in filter(lambda x : x in KINDS, sys.argv[3:])]
    else:
        datasets = [kind for kind in KINDS]

    # -- Bench list

    list_of_tasks = []
    for _ in range(iterations):
        for dataset in datasets:
            for arg_mode in KINDS[dataset]:
                t = (dataset, arg_mode, KINDS[dataset][arg_mode])
                list_of_tasks.append(t)   

    random.shuffle(list_of_tasks)

    # -- Run the benchs

    csv = "csv/loadbench_{}.csv".format(
        str(datetime.datetime.now())[:19].replace(' ', '-').replace(':', '-'),
    )

    file_exists = os.path.isfile(csv)

    with open(csv, 'w+') as f:
        try:
            print("WRITING", csv, file=sys.stderr)
            if not file_exists:
                f.write("{}\n".format("dataset,nb_trees,file,nb_quads,memory_usage,loading_time"))
                f.flush()

            for dataset, arg, nb_trees in list_of_tasks:
                one_benchmark(f, filename, dataset, arg, nb_trees)

        except KeyboardInterrupt:
            sys.stdout.write("\r") # clear the '^C' that appears

def one_benchmark(f, filename, dataset, arg, nb_trees):
    cmd = COMMAND.format(task=arg, filename=filename, kind=dataset)
    res = subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
    f.write("{},{},{},{}".format(dataset, nb_trees, filename, res.stdout.decode('utf8')))
    f.flush()
    print("DONE", dataset, nb_trees, filename, file=sys.stderr)

main()
